Bout de code pour le parcours des parents communs

= Introduction =

Alors g simplifié, j'espère qu'il n'y aura pas de bug
Et pour le NONE qu'on obtenait, si c'est comme en JAVA, il faut comparer
les noms des taxons car les deux objets ne seront jamais identiques...!?

Si vous pouvez tester, ce serait cool, g pris ce que je pouvais pour intaller,
mais lancer et tester,  B-(
donc je viendrai poser des questions avec mon ordi à l'appui!

Sinon, je n'ai pas pu venir hier, pour cause d'entretien de stage et le 
fameux projet du prems semestre Novell que j'avais oublié!

voila Sorel, 
maigre contribution

= Details =
{{{
from species import Species

def createTree( name ):
    currentTaxon = Species( name = name )
    LIST_PARENT = []

    while currentTaxon.name != "root":
        parent = currentTaxon.getParent()
        parent.setChild( currentTaxon )
	
        if currentTaxon not in LIST_PARENT:
            LIST_PARENT.append( currentTaxon )	
	
    return LIST_PARENT


def getCommonParent( name_a, name_b ):
    taxon_a = Species( name = name_a )
    taxon_b = Species( name = name_b )
    TREE_A = createTree( taxon_a.name )

    while taxon_b.name != "root":       
        for currentParent_a in TREE_A:
            if taxon_b.name == currentParent_a.name:
                return taxon_b			
		taxon_b = taxon_b.getParent()

    if taxon_b.name == "root":
        return taxon_b

print getCommonParent( "rattus", "conus rattus" )
}}}