#summary PhyloCore usage tutorial

= Introduction =

First of all, you'll have to import Django setting. So all of your scripts may begin like that :

{{{
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from phylocore.models import *
}}}

= Working with Taxa =

To get a taxa from his name do:

{{{
>>> taxa = Taxa.objects.get( name = 'mus musculus' )
>>> taxa
<Taxa: mus musculus>
}}}

from this taxa, you will be able to get all the homonym, synonym and common names:

{{{
>>> taxa.homonyms.all()
[]
>>> taxa.synonyms.all()
[]
>>> taxa.commons.all()
[<CommonName: mouse (english)>, <CommonName: rat noir (french)>]
}}}

== Dealing with parents ==

Getting the first parent:

{{{
>>> taxa.parent
<Taxa: mus>
}}}

Parents can be chained:

{{{
>>> taxa.parent.parent
<Taxa: murinae>
}}}

Get all parents by order (closest to furthest).

{{{
>>> taxa.parents.all()
[<Taxa: mus>, <Taxa: murinae>, <Taxa: eukaryota>, <Taxa: root>]
>>> list( reversed( taxa.parents.all() ) )
[<Taxa: root>, <Taxa: eukaryota>, <Taxa: murinae>, <Taxa: mus>]
}}}

'root' doesn't have parents

{{{
>>> root = Taxa.objects.get( name = 'root' )
>>> root.parents
[]
}}}

== Dealing with rank == 

You can know the rank of a taxa.

{{{
>>> taxa.rank
<Rank: species>
}}}

and you can get all taxa from a specify rank

{{{
>>> species = Rank.objects.get( name = 'species' )
>>> species.taxas.all()
[<Taxa: echinops <plant>>, <Taxa: echinops <mammal>>, <Taxa: mus musculus>]

>>> genus = Rank.objects.get( name = 'genus' )
>>> genus.taxas.all()
[<Taxa: rattus>, <Taxa: mus>]
}}}

== Working with tree ==

Now we know about taxa, we can create trees. A Tree object is created by passing a newick format string. In the following example, we create a newick tree with one homonym (echinops), 3 scientific names, and one bad taxa name

{{{
>>> nwk_tree = "(echinops,(rattus,(mus,(mus musculus),badname)))"
}}}

Now we can create our tree:

{{{
>>> tree = Tree.objects.create( tree_string = nwk_tree, name = "example1")
}}}

The `is_valid` attribute tell us if our tree was well formated or not

{{{
>>> tree.is_valid
True
}}}

Now we want all (good named) taxa list:

{{{
>>> tree.taxas.all()
[<Taxa: rattus>, <Taxa: mus>, <Taxa: mus musculus>]
}}}

We can get informations from bad taxa names and homonyms:

{{{
>>> tree.bad_taxas.all()
[<BadTaxa: badname>]
>>> tree.homonyms.all()
[<HomonymName: echinops>]
}}}

There is no synonyms or commons names:

{{{
>>> tree.synonyms.count()
0L
>>> tree.commons.count()
0L
}}}

Let's try now to get all taxa wich correspond to echinops :

{{{
>>> homonym = tree.homonyms.all()[0]
>>> homonym.taxas.all()
[<Taxa: echinops <animalia>], [Taxa: echinops <plantae>]
}}}

We can list all taxa (including homonyms, synonyms, commons name and bad taxa names) like this :

{{{
>>> tree.all_taxa_list
[<HomonymName: echinops>,<Taxa: rattus>, <Taxa: mus>, <Taxa: mus musculus>, <BadTaxa: badname>]
}}}