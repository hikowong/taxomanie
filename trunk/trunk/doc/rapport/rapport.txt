PhyloExplorer
=============

:Authors:

   Nicolas Auberval
   Nicolas Clairon
   Sorel Diser

Présentation du projet
=======================

Phylogénie et Taxonomie
-----------------------

Comprendre le sujet
~~~~~~~~~~~~~~~~~~~

La phylogénie est l'étude de la formation et de l'évolution des organismes du vivant en vue d'établir leur parenté. Elle formalise la classification sous forme d'arbres phylogénétiques (équivalent à un arbre généalogique) dont les noeuds sont des taxons.
La taxomanie associée définit l'étude et le regroupement de ces organismes en entité selon leurs critères, caractères et autres similitudes.

[caption=""]
.Exemple d'arbres phylogénétiques
-----------------------------------------------
Root
| +- Hominoidea
| +- Hominidae
| +- Homo/pan/gorilla group
| | +- Homo
| | +- Pan 
-----------------------------------------------

Analyse de l'existant
---------------------

Le NCBI _National Center for Biotechnology Information_
Le site du NCBI est un ensemble d'outils et de bases de données sur les biotechnologie, voir `http://www.ncbi.nlm.nih.gov/sites/entrez?db=taxonomy`.
En ce qui nous concerne, on retiendra les points qui suivent comme références de départ pour le projet PhyloExplorer :

- Les données : base de données taxonomique téléchargeable à disposition du public
- Les actions de bases : la gestion d'arbres phylogénétiques en ligne

Comme tout site de recherche, le NCBI propose beaucoup d'informations via une interface chargée et peu adaptée au travail personnalisé.
La navigation sur un arbre apparaît assez fastidueuse et les informations taxonomique complémentaires, certes complètes, deviennent vite illisibles.

Besoins et objectifs
--------------------

Besoins
~~~~~~~

En perpétuel remaniement grâce/à cause de l'avancée des nouvelles techniques moléculaires et génétiques, les chercheurs ont besoin d'outils concis pour :
- la visualisation,
- l'analyse,
- la modification,
- la confrontation, 
- le partage d'informations.

Objectifs
~~~~~~~~~

L'objectif principal de ce projet est de pouvoir travailler sur sa propre collection d'arbres et d'appliquer les fonctionnalités suivantes :

- parcourir et visualiser une collection d'arbres,
- vérifier la conformité des arbres et taxons,
- effectuer des requêtes sur une collection (tri),
- filtrer une collection (garder des sous-arbres),
- produire des statistiques sur la collection.

Exigences
~~~~~~~~~

Les seules exigences interviennent au niveau des formats d'entrée/sortie du projet. Ces derniers prennent en compte une collection d'arbres. On cite _phylip_, _newick_, _nexus_ -> .nwk, et la banque de données _.csv_.

Documentation technique
=======================

Formats des fichiers
--------------------

[caption="Exemple : "]
.Le format de données et de structure d'arbres phylogénétiques _Phylip/Newick_ 
-----------------------------------
((homo, rattus), bos ,(pan,mus));
-----------------------------------

[caption="Exemple : "]
.Le format de fichier _Nexus_ pour les collections d'arbres
--------------------------------------------------------------
#nexus
begin trees;
Tree 1 = ((homo, rattus), bos ,(pan,mus));
Tree 2 = (pan,mus);
Tree 3 = ((homo,rats),pan);
Tree 4 = (((((homo,pan),macaca),ratus),dasypus),monodelphi);
end;
--------------------------------------------------------------

[caption="Exemple : "]
.données de la base _names.dump_ du NCBI
-----------------------------------------------------------
    id  |   nom taxon   | 		|           type        |

9611    |   Canis       |		|   scientific name     |
9612    |   Canis lupus |		|   scientific name     |
9612    |   gray wolf   |		|   genbank common name |
9614    |   coyote      |		|   genbank common name |
9615    |   Canis canis |		|   synonym             |
-----------------------------------------------------------

NOTE: TODO (sorel) Nexus translate, commentaire

Choix technique
---------------

Langage de programmation::

Tout le projet PhyloExplorer repose sur le langage *Python*. Ce langage a été
choisi pour sa licence (libre), sa portabilité (il est multiplateforme), sa robustesse,
et sa syntaxe simple et claire. La facilité avec laquel il manipule les
chaines de caractères à fait pencher la balance en sa faveur. Enfin, une
bibliothèque python sur le traitement d'arbres phylogénétiques avait déjà été
créé par l'un des auteurs : la base était déjà faite.

Serveur Web::

Apache a été envisagé mais nous voulions un serveur web simple et autonome ; or
le mod_python d'apache n'est pas trivial à installer et à configurer. Nous nous
sommes donc tournés vers *CherryPy* qui est un "__framework HTTP orienté
objet__". Ainsi, l'installation était grandement facilitée et une utilisation
standalone pouvait être envisagée.

La gestion de graphes::

Notre but étant de créer l'aborescence du NCBI à partir d'une liste de taxon,
il nous fallait une bibliothèque de gestion de graphes. Nous utilisons pour
cela *NetworkX*. Entièrement écrite en python, cette bibliothèque
multiplateforme s'installe très facilement et est relativement puissante.

Moteur de templates::

Le moteur de templates à été attribué à *Pleet*. Une bibliothèque python
écrite par l'un des auteurs permettant d'embarquer du code python dans du
HTML. Cette bibliothèque est très simple, rapide et fait bien son travail.

Gestionnaire de projet::

Nous avons utilisé **Google Code**. Ce gestionnaire de projet permet de gérer très
simplement des petits projets en mettant à disposition un système de wiki, un
gestionnaire de bugs et un gestionnaire de version (subversion).


Structure du projet
-------------------

Nous n'avons pas voulu enfermer PhyloExplorer dans une utilisation
particulière (ici le service web). C'est pourquoi PhyloExplorer est structuré
en plusieurs parties : 

- *PhyloCore* : une batterie de classes et de méthodes qui manipulent les
  collections d'arbres phylogénétiques et dialoguent avec la base de données du
  NCBI.
- *PhyloWeb* : comprenant un serveur web légé et autonome ainsi qu'un
  ensemble de templates.

Cette distinction dans la structure permet aux développeurs de créer d'autres
applications en se servant de la même base (PhyloCore). Des scripts, pipelines ou encore
des applications QT peuvent être créés à moindre coût.

PhyloCore
~~~~~~~~~
PhyloCore regroupe trois classes (_TaxanomyReference_, _TreeCollection_ et
_PhylogeneticTree_) et une bibliothèque de gestion d'arbres phylogénétiques :
_Phylogelib_.

.Diagramme de classes
| image:phylo1.png[] |

Phylogelib
^^^^^^^^^^

Phylogelib est une bibliothèque python qui permet de manipuler des arbres
phylogénétiques. Très rapide, elle se contente de traiter des chaines de
caractères au format newick (on évite ainsi la lourde gestion de graphes).

.Fonctions principales utilisées dans PhyloExplorer
***************************************************
checkNwk(nwk)::

Renvoie vrai si la chaine passée en paramètre est au format newick.

getBrothers(tree, node)::

Retourne la liste des frères du noeud.

getChildren(tree)::

Retroune la liste des premiers fils de l'arbre.

getTaxa(tree)::

Renvoie la liste de tous les taxons de l'arbre.

removeBootStraps(tree)::

Supprime les "bootstraps" de l'abres

removeNexusComments(nex)::

Supprime les commentaires d'une collection au format nexus

tidyNwk(nwk)::

Nettoie la chaine au format newick en supprimant tous les espaces superflux.
******************************************************


L'outil preproc.py
^^^^^^^^^^^^^^^^^^

PhyloExplorer utilise la base de données du NCBI comme base d'information.
Cette base de données est accessible à l'adresse :
`ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz`. Cette archive
comprend plusieurs images de la base du NCBI. Celles qui nous intéressent sont
`names.dump` et `nodes.dump`. Ces images nous permettent de récupérer :

- l'id
- le nom (scientifique)
- le nom du parent
- l'homonyme auquel il se rapporte
- la liste de ses parents
- la liste de ses synonymes
- la liste de ses noms communs.

Le problème réside dans le fait que toutes ces informations sont éparpillés
entre `names.dump` et `nodes.dump` (qui contiennent également beaucoup
d'informations qui ne nous sont pas utiles). Nous avons alors effectué une
compilation de ces informations et les avons placés dans le fichier
`taxonomy.csv`. Voici sa structure :

-------------------------------------------------------------------------------------------
id|nom|nom_du_parent|homonyme|liste!des!parents|liste!des!synonymes|liste!des!noms!communs|
-------------------------------------------------------------------------------------------

Les éléments d'une liste sont séparés par un point d'exclamation. l'id est
très important car il permet de générer les liens pointant vers le site du NCBI.

Ainsi, à chaque fois qu'il que l'on veut mettre à jour le fichier
`taxonomy.csv`, il faudra lancer cette procédure. Nous avons créer un
outil qui l'effectue automatiquement. Il s'appelle `preproc.py`.

Cet outil téléchargera automatiquement l'image de la base du NCBI, extraira
les informations nécessaires et générera le fichier `taxonomy.csv`.

[NOTE]
.A propos de base de données
Dans ce projet, il nous a été demandé de s'affranchir totalement de base de
données classique (MySQL, SQLite...) pour charger toute la taxonomy du NCBI
en RAM. Cependant, pour plus de clareté (et par habitude ?) nous continuerons
de parler de base de données du NCBI


TaxonomyReference
^^^^^^^^^^^^^^^^^

Cette classe permet d'intéragir avec la base du NCBI et plus particulièrement
avec le fichier `taxonomy.csv` qu'il prend en paramètre.

.Méthodes principales
***************************************************
getCommonParent(self, taxa_list)::
    retourne le premier parent commun de tous les taxons présents dans la liste

getHomonyms(self, name)::
    retourne la liste des homonymes du nom passé en paramètre. \+
    Exemple:

    >>> self.getHonomyms( "echinops" )
    ['echinops <plant>', 'echinops <mammal>']

getIntervalParents(self, name1, name2)::
    retourne la liste des parents intermédiaires entre deux taxons. \+
    Exemple:

    >>> self.getIntervalParents( "eukaryota", "eutheria" )
    ['euarchontoglires', 'glires', 'rodentia', 'sciurognathi', 'muroidea']
    >>> self.getIntervalParents( "murinae", "eutheria" )

getNCBIArborescence(self, taxa_list)::
    cette méthode prend une liste de taxons et créé l'aborescence du NCBI en
    recherchant les parents dans la base de données.

getParents(self, name)::
    retourne la liste de tous les parents d'un taxon

isHomonym(self, name)::
    retourne vrai si le taxon est un homonyme. \+
    Exemple:

    >>> self.isHomonym( "echinops" )
    True

isValid(self, name)::
    retourne vrai si le nom du taxon est un nom scientific présent dans la
    base du NCBI

stripTaxonName(self, taxon_name)::
    tronque le nom passé dans le but d'en extraire le nom scientifique. \+
    Exemple:

    >>> self.stripTaxonName( "rattus" ) -> "rattus"
    >>> self.stripTaxonName( "rattus_france" ) -> "rattus"
    >>> self.stripTaxonName( "rattus_rattus_france" ) -> "rattus_rattus"

**********************************************************

Cette classe est incluse dans toutes les classes de PhyloCore.

TreeCollection
^^^^^^^^^^^^^^

Cette classe représente une collection d'arbres phylogénétiques.
Elle prend en paramètre une collection au format _Phyllip_, _Nexus_ ou
_Nexus translate_. Elle propose des méthodes permettant de manipuler
une collection comme d'effectuer des filtrages et des requêtes.
Elle permet également de récupérer les statistiques de la collections.

.Méthodes principales
************************************************************
getCollection(self)::
    Retourne la collection en cours ; c'est-à-dire que si une requête à
    été lancé, elle renverra la collection filtrée. Sinon, elle renverra la
    collection initiale.

clearQuery(self)::
    Cette méthode permet de mettre à blanc la requête.
    La méthode _getCollection()_ renverra alors la collection
    initiale.

query(self, query)::
    Applique une requête à la collection. `query` doit être une expression du
    type : 
+
    {genre1} > 3 and ( {genre2} == 2 or {genre3} < 4 )
+
`genre` peut être soit le nom d'un taxon (_rattus_rattus_) soit le nom
d'une espèce (_murinae_). `genre` doit être entre accolade. Le reste de la
requête est une expression python classique (d'où l'utilisation du `==`).
En fait, les noms entre accolades seront remplacés par leur occurence dans
la collection. Nous obtienons donc une expression python classique qui
sera évaluée :

        4 > 3 and ( 1 == 2 or 3 < 4 )

displayHomonymList(self)::
    Cette méthode retourne la liste des homonymes au format HTML.
+
*Remarque* : __Cette méthode doit être réécrite de manière à tenir compte du MVC__

  
displayStats(self, allparents=False)::
    Cette méthode renvoie l'abre du NCBI au format HTML. Cette arbre contient
    des données statistiques qui permet de connaitre le nombre d'occurence
    d'une espèce dans la collection.
+
*Remarque* : __Cette méthode doit être réécrite de manière à tenir compte du MVC.
 Elle doit se trouver dans une template__


filter(self, taxa_list)::
    Cette méthode va supprimer certains taxons de la collection d'arbres. Elle
    est très utile pour ne travailler que sur une partie de la taxonomie sans
    être polluée par d'autres taxons.
+
Cette méthode prends en paramètre  la liste des taxons à supprimer.

getNCBITreeAsNwk(self)::
    Cette méthode renvoie l'arborescence du NCBI de la collection au format
    Newick. Elle est utilisé si l'on souhaite télécharger l'arbre modèle du
    NCBI.

getNbTrees(self, taxon)::
    Retourne le nombre d'arbre dans lesquels se trouve un taxon

initStat(self)::
    Lorsque l'on fait des requêtes, on ne travaille que sur une partie de la
    collection. Cette méthode permet de mettre à jour les statistiques.
    
stat1(self)::
    Cette méthode permet de connaitre le nombre
    d'arbres à n feuilles. Elle renvoie un dictionnaire qui aura comme clé le
    début de l'intervalle. Voir la section statistiques pour plus de détails.

stat2(self)::
    Cette méthode permet de connaître le nombre de taxon présents dans _n_
    arbres. Comme _stat1_, elle renvoie un dictionnaire. Voir la section
    statistiques pour plus de détails.

**********************************************************

[python]
[caption=""]
.Exemple d'utilisation
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from treecollection import TreeCollection

# Instanciation. On passe une collection au format Nexus en paramètre
mycollection = TreeCollection( open("mycol.tre").read() )

# Récupère la collection
print mycollection.getCollection()

# Combien d'arbres sont dans la collection
print len( mycollection.getCollection() )

# Effectue une requête afin de ne garder tous les arbres dont les murinaes
# sont supérieurs à 1
mycollection.query( "{murinae} > 1" )

# Récupère la nouvelle collection
my_new_collection = mycollection.getCollection()

# Efface la requête
mycollection.clearQuery()

# Récupère la collection originelle
mycollection.getCollection()

# Filtrage. On supprime tous les taxon "mus", "pan" et "homo" de la
# collection. Le resultat sera une chaine de caractère au format Nexus.
nexus_string = mycollection.filter( ["mus", "pan", "homo"] )
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

On voit bien dans cette exemple que la méthode `query` influera sur la méthode
`getCollection` qui renverra alors qu'une partie de la collection. La méthode
`clearQuery` permet d'effacer les effets de la requête.

Statistiques
++++++++++++

PhyloExplorer fournit deux types de statistiques. La première présente le
nombre d'arbres à _n_ feuilles :

-------------------------------
10 feuilles -> 3 arbres
12 feuilles -> 9 arbres
16 feuilles -> 3 arbres
20 feuilles -> 4 arbres
24 feuilles -> 9 arbres
26 feuilles -> 8 arbres
30 feuilles -> 1 arbres
31 feuilles -> 2 arbres
32 feuilles -> 1 arbres
40 feuilles -> 3 arbres
...
-------------------------------

Le problème résidait dans le fait qu'il pouvait avoir une quantité
considérable d'arbre au nombre de feuilles différentes. L'idée ici est de
regrouper le nombre de feuille par tranche :

[caption=""]
.Exemple de répartition par tranche de 10
-------------------------------
de 0 à 10 feuilles -> 0 arbres
de 10 à 20 feuilles -> 15 arbres
de 20 à 30 feuilles -> 21 arbres
de 30 à 40 feuilles -> 4 arbres
de 40 à 50 feuilles -> 3 arbres
...
-------------------------------

[NOTE]
[caption="Remarque"]
L'intervalle ne comprend pas la dernière valeur (de 0 à 10 feuilles
représentera l'intervalle `[0,10[`)

La grandeur de l'intervalle (que nous appellerons _ratio_) est calculée par
l'équation : `nbmax*10.0/100` où `nbmax` est le nombre maximum de
feuilles par arbres présentes dans la collection (ici 40). Cela permet de
n'avoir qu'une dizaine de barres dans notre diagrame.

Le dictionnaire renvoyé sera du type
`{__nombre de feuilles__ : __nombre d'arbres__}`
donc pour l'exemple ci-dessus on aura :

-------------------------------------
{0:0, 10:15, 20:21, 30:4, 40:3 ...}
-------------------------------------

La statistique numéro 2 calcule la fréquence de distribution des taxons dans
la collection. Le ratio est calculé sur le même principe que précédemment.


PhylogeneticTree
^^^^^^^^^^^^^^^^

Cette classe permet d'afficher un arbre phylogénétique au format HTML. La
représentation se fait sous forme d'arborescence simple. Par soucis de
performances, cette classe est chargée uniquement lors de l'affichage d'un
arbre phylogénétique. Ainsi, toutes les opérations relatives aux arbres se
trouvent soit dans la bibliothèque _Phylogelib_, soit dans la classe
_TreeCollection_.

| image:phylo2.png[] |

PhyloWeb
~~~~~~~~~

Dans cette partie, nous allons parler du projet PhyloExplorer à proprement
parler ; c'est-à-dire la partie applicatif. PhyloWeb est composé de deux
grands ensemble : le serveur web PhyloExplorer.py et les templates qui lui
sont associées.

PhyloExplorer.py
^^^^^^^^^^^^^^^^
Ce fichier représente en quelque sorte le _main_ du projet. C'est ce script
qu'il faudra lancer pour exécuter le serveur web. L'application sera alors
accessible via l'adresse `http://adresse_ip:port` où `adresse_ip` et `port`
sont définis dans le fichier de configuration `phyloexplorer.conf`.

le fichier `phyloexplorer.py` est composé de la classe PhyloExplorer qui sera
utilisée par l'outil CherryPy. Cette classe possède plusieurs particularités
qui sont propres à CherryPy comme l'exposition d'une méthode.

Une méthode exposée est une méthode qui sera accessible via l'URL de
l'application. Elle est reconnaissable par son décorateur :
`@cherrypy.expose`. Chaque méthode exposée doit renvoyer une chaine de
caractère qui sera affiché tel quel à l'utilisateur. Cette chaine doit donc
être au format HTML.

Pour plus d'information concernant le serveur web, merci de consulter la
documentation de CherryPy.

Pour renvoyer du HTML, nous utilisons la méthode `self._presentation` qui
prend en paramètre, le nom de la template à utiliser, un message d'information
(facultatif) et une petite chaine de caractère qui sera placée en haut de la
page et indiquera où se trouve l'utilisateur (ex : `Home > Statistics`).


Les templates
^^^^^^^^^^^^^

L'utilisation des templates métite que l'on s'y attarde un petit peu. Toutes
les templates sont regroupées dans le répertoire "templates". Ce répertoire
regroupe aussi les scripts CSS et javascripts.

Une template, bien qu'ayant l'extension `.html`, est un ensemble de code
python et de HTML. Le code python est placé entre les balises `<%` et `%>`.

[python]
[caption=""]
.Une template basique
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<%
if True:
%>
    <%|%>                           <1>
    <b> Hello World ! </b>
<%
else:
    #                               <2>
%>
    <i> Hello Me ! </i>
<%|%>
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Le moteur de template Pleet va evaluer le code python et renverra le resultat.
Dans cet exemple, `True` est toujours vrai donc `Hello Word` sera toujours
affiché.  

Le symbole `<%|%>` *(1)* permet de spécifier l'indentation. On indique ainsi au
moteur de template si on se trouve toujours dans le `if` ou non.

NOTE: Le fait de placer une ligne de commentaire *(2)* spécifie également l'indentation.

Pleet permet "d'exposer" des objets afin qu'ils puissent être utilisés dans les
templates.

[python]
[caption=""]
.Exposition d'un objet
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
pleet["_civilite_"] = civilite
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dans cet exemple, on rend accessible la variable `civilite` accessible dans la
template sous le nom `\_civilite\_`.

[python]
[caption=""]
.Utilisation d'un objet exposé
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Bonjour 
<%
if _civilite_ == "Mme":
    #
%>
    Madame,
<%
elif _civilite_ == "Mlle":
    #
%>
    Mademoiselle,
<%
else:
    #
%>
    Monsieur,
<%|%>
code~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dans cet exemple, une série de tests sur la variable `\_civilite\_` permettra de
produire la bonne template.

Sécurité
--------

Par manque d'infrastructure et d'outils dédiés, nous n'avons pas pu estimer le
taux de charge du serveur. En ce qui concerne la sécurité, nous avons fait
particulièrement attention à éviter la possibilité d'injection et de XSS.

Pour plus d'information concernant la sécurité du serveur, merci de se référer
à la documentation de CherryPy

Evolutions
----------

Il existe une bibliothèque appellé BioPython qui fournit des classes et
des méthodes permettant de travailler dans le contexte de la biologie.

Cette bibliothèque est très complète et très complexe. Ayant tout ce dont nous
avions besoin pour avec la Phylogelib, et découvrant cette bibliothèque
tardivement dans le projet, nous n'avons pas eu le temps d'appronfondir son
utilité. Il serait intéressant de savoir si BioPython (qui soutenu par une
communauté international de développeur) peut remplacer Phylogelib (qui reste
très jeune).

Interface et visualisation
--------------------------

NOTE: TODO (sorel) css, js, stat, variables serveur pr images et liens

Module phyloWidget
------------------

NOTE: TODO (sorel) résumé, spécifications, possibilités, exemples of use, site ref

Installation
------------
Cette section détaille la procédure d'installation et de configuration de
l'application web PhyloExplorer. 

Prérequis
~~~~~~~~~
Pour une utilisation optimale, PhyloExplorer nécessite au minimum 2 Go de
mémoire RAM. Prévoir également un processeur cadencé à 2 Ghz et 200 Mo d'espace
disque pour l'installation.

Installation
~~~~~~~~~~~~

Installation des dépendances
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
PhyloExplorer nécessite les bibliothèques suivantes :

- Python >= 2.4 : (`http://www.python.org`)
- CherryPy >= 3.0 (`http://www.cherrypy.org/`)
- NetworkX >= 0.35 (`https://networkx.lanl.gov/wiki`)
- Pleet (le paquet est disponible dans tools)

Chacune de ces bibliothèques s'installe très facilement : extraire l'archive
et taper simplement sous root `$ python setup install.py`.

Installation de PhyloExplorer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Taper simplement en root la commande :
-------------------------
python setup.py
-------------------------

Si vous n'avez pas les droits, vous pouvez l'installer dans un répertoire
définit en tapant :
------------------------------------------
python setup.py /chemin/vers/le/répertoire
------------------------------------------

Voici la structure de l'application dans l'arborescence de fichiers:

---------------------------------
bin:
    phyloexplorer                   <1>

share/phyloexplorer/data:
    taxonomy.csv                    <2>

share/phyloexplorer/etc:
    phyloexplorer.conf              <3>

share/phyloexplorer/templates:      <4>
    about.html
    check.html
    error.html
    favicon.ico
    footer.html
    getallsugestions.html
    header.html
    help.html
    index.html
    jquery-1.2.3.js
    jquery.blockUI.js
    NautilusBlack.jpg
    NautilusBlue.jpg
    NautilusDarkBlue.jpg
    NautilusDarkGreen.jpg
    NautilusGreen.jpg
    NautilusGrey.jpg
    NautilusWhite.jpg
    phyloexplorer.js
    site.css
    statistics.html
    taxomanie.js

share/phyloexplorer/tools:
    preproc.py                     <5>

<1> Serveur stand-alone du serveur web
<2> "Base de données" du NCBI
<3> Fichier de configuration du serveur web
<4> Répertoire où se situent toutes les templates
<5> Outil permettant de générer le fichier taxonomy.csv
----------------------------------

Configuration
~~~~~~~~~~~~
Le serveur web utilise le fichier `phyloexplorer.conf` pour sa configuration.
Voici sa structure :

----------------------------------------------
[global]
log.screen = 0 
server.socket_host = "127.0.0.1"
server.socket_port = 8080
server.thread_pool = 10
session.timeout = 1800
proxy = "www.info-ufr.univ-montp2.fr:3128"
----------------------------------------------

log.screen::

Cette variable est un booleen. Si elle est vrai (positionnée à 1), des
informations de débogage seront envoyés sur la sortie standard de la console.
Cette variable doit être mise à 0 pour un serveur de production.
Voir la documentation de CherryPy pour plus de détails.

server.socket_host::

Défini l'adresse ip de la machine où est lancé le serveur. 
Voir la documentation de CherryPy pour plus de détails.

server.socket_port::

Défini le port où devra être accessible l'application.
Voir la documentation de CherryPy pour plus de détails.

server.thread_pool::

Défini le nombre d'instances à déployer. Plus le nombre de connexion est
élevé, plus ce chiffre doit augmenter.
Voir la documentation de CherryPy pour plus de détails.

session.timeout::

Précise la durée de la session d'un utilisateur. Elle se définit en secondes
et indique la période d'inactivité autorisée de l'utilisateur avant
l'expiration de sa session. Par défault elle est de 30 minutes.

proxy (facultatif)::

Cette variable est propre à PhyloExplorer (ie ne provient pas de CherryPy).
Elle permet de spécifier l'adresse du proxy afin d'autoriser l'affichage des
images et la correction du nom des taxons. Si vous avez un problème avec ces
fonctionnalités, vous devriez vérifier que cette variable est correctement
renseignée.

Bilan
=====

Résultats
~~~~~~~~~

NOTE: TODO liste fonctionnalités faites! + fonctionnalités bonus

NOTE: TODO comparaison navigation sur NCBI et phyloexplorer (screenshot)



Annexe
======

Glossaire phylogénétique
------------------------

*Abre phylogénétique* : équivalent d'un arbre généalogique des taxons.

*Phylogénie* : c'est l'étude de la formation et de l'évolution des organismes vivants en vue d'établir leur parenté. 

*Taxon* : Les organismes du vivant sont classés selon des catégories en fonction de leurs similitudes et de leurs relations évolutives. Ces catégories sont des taxons et représentent les noeuds d'un arbre phylogénétique.

Glossaire technique
-------------------

*CSS* : feuille de style, dans notre cas externe, décrivant le style des balises d'une page HTML la référençant. Elle personnalise l'aspect visuel des pages à l'aide des indices _id_, _name_, _class_.

*CSV* : _Comma Separated Values_, valeurs séparées par des virgules ou  un séparateur défini. C'est un type de banques de données.

*Filtrage* : Ici permet de restreindre un arbre en sous arbres.

*Jquery* : c'est une bibliothèque Javascript qui porte sur l'interaction entre JavaScript et HTML. La librairie se présente comme un unique fichier décrivant les utilisations _d'évènements multi navigateur_, _DOM_,_Effets et animations_, et surtout _Ajax_.

*NCBI* : National Center for Biotechnology Information.

*Nexus* : format de fichier contenant des arbres _phylogénétiques_ et des annotations associées.

*Newick* : format de fichier contenant des arbres _phylogénétiques_.

*Phylip* : format de représentation d'arbres _phylogénétiques_ sous forme de _(syntaxe parenthésée);_.

*Python* : langage de programmation interprété, multi-paradigme, qui favorise la programmation impérative structurée, et orientée objet. Il est doté d'un typage dynamique fort, d'une gestion automatique de la mémoire par ramasse-miettes et d'un système de gestion d'exceptions. Sous licence libre et multi plates-formes.

*SVN / Subversion* : C'est un entrepot de versions temporaires de code qui permettent aux développeurs de tester, partager, modifier, comparer, réinstaller un projet en équipe.

*Template* : c'est un modèle permettant de construire les pages d'un site web selon une trame générale (un squelette) et des zones modifiables. Utile pour les mise à jour et modifications en cascade.

Liens externes
--------------

*Python* : `http://www.python.org`

*NetworkX* : `https://networkx.lanl.gov/wiki`

*CherryPy* : `http://www.cherrypy.org/`

*BioPython* : `http://biopython.org/wiki/Main_Page`

*NCBI* : `http://www.ncbi.nlm.nih.gov/`
